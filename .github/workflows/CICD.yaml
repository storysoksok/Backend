name: STORYSOKSOK-CICD

# 트리거
on:
  push:
    branches: main

# 1) Build & Push Docker Image
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 소스 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # 2. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      # 3. Gradle Wrapper 실행 권한
      - name: Gradle Wrapper 권한 부여
        run: chmod +x gradlew

      # 4. Secret → yml 파일 생성
      - name: Create oauth2.yml from secret
        run: echo "${{ secrets.OAUTH2_YML }}" > ./src/main/resources/oauth2.yml

      - name: Create application-prod.yml from secret
        run: echo "${{ secrets.APPLICATION_PROD_YML }}" > ./src/main/resources/application-prod.yml

      # Secret → docker-compose 생성
      - name: Create docker-compose.yml from secret
        run: |
          cat <<'EOF' > docker-compose.yml
          ${{ secrets.DOCKER_COMPOSE_YML }}
          EOF

      # 5. Gradle 빌드 (테스트 제외, prod 프로필)
      - name: Build with Gradle
        run: ./gradlew clean build -x test -Dspring.profiles.active=prod

      - name: Docker 빌드환경 설정
        uses: docker/setup-buildx-action@v3

      - name: DockerHub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-          

      - name: Build & Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/storysoksok-back:${{ github.ref_name }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/storysoksok-back:cache
          cache-to: type=inline

  # ---------- ② Deploy ----------
  deploy:
    needs: build
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts        

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            cd ~/backend
            BRANCH=${{ github.ref_name }}            
            IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/storysoksok-back:${BRANCH}
            
            # sudo로 compose 파일 덮어쓰기
            cat <<'EOF' | sudo tee docker-compose.yml >/dev/null
            ${{ secrets.DOCKER_COMPOSE_YML }}
            EOF
                        
            echo "도커 이미지 풀 : ${{ secrets.DOCKERHUB_USERNAME }}/storysoksok-back:${BRANCH}"
            docker pull $IMAGE
            
            echo "Stopping running containers..."
            IMAGE="$IMAGE" docker-compose up -d --build            
                                    
            # <none> 태그로 남은 이미지 정리
            echo "불필요한 dangling(<none>) 이미지 정리..."
            docker image prune -af
            
            echo "배포가 성공적으로 완료되었습니다."